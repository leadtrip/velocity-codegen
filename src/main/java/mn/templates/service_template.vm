package ${servicesPkg};

import ${modelsPkg}.${entityName}Dto;
import jakarta.inject.Singleton;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.UUID;

#set( $transformerName = "${entityName.toLowerCase()}Transformer" )
#set( $repositoryName = "${entityName.toLowerCase()}Repository" )
#set( $entityId = "${entityName.toLowerCase()}Id" )
#set( $entityDtoClass = "${entityName}Dto" )
#set( $entityDtoVariable = "${entityName.toLowerCase()}Dto" )

@Singleton
public class ${entityName}Service {

    private final ${entityName}Transformer $transformerName;
    private final ${entityName}Repository $repositoryName;

    public ${entityName}Service(${entityName}Transformer $transformerName, ${entityName}Repository $repositoryName) {
        this.$transformerName = $transformerName;
        this.$repositoryName = $repositoryName;
    }

    public Mono<$entityDtoClass> get${entityName}(UUID workspaceId, UUID $entityId) {
        return ${repositoryName}.findByWorkspaceIdAndId(workspaceId, $entityId)
            .map(${transformerName}::from);
    }

    public Flux<$entityDtoClass> listByWorkspace(UUID workspaceId) {
        return ${repositoryName}.findAllByWorkspaceId(workspaceId)
            .map(${transformerName}::from);
    }

    public Mono<$entityDtoClass> create($entityDtoClass $entityDtoVariable, UUID workspaceId) {
        return ${repositoryName}.save(${transformerName}.to($entityDtoVariable, null, workspaceId))
            .map(${transformerName}::from);
    }

    public Mono<$entityDtoClass> update(UUID workspaceId, UUID $entityId, $entityDtoClass $entityDtoVariable) {
        return ${repositoryName}.update(${transformerName}.to($entityDtoVariable, $entityId, workspaceId))
            .map(${transformerName}::from);
    }
}
